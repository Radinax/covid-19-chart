{"version":3,"sources":["slices/index.js","components/ApexChart.js","utils/apexDefaultConfig.js","components/charts/covidGlobalChart.js","components/charts/covidVenezuelaChart.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["fetchCovidVenezuelaData","createAsyncThunk","country","a","axios","get","response","data","fetchCovidGlobalData","initialState","loading","error","sliceCovidVenezuela","createSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","sliceCovidGlobal","reducer","combineReducers","covidVenezuela","covidGlobal","actions","fetchingCovidDataVenezuela","fetchingCovidDataVenezuelaSuccess","fetchingCovidDataVenezuelaError","store","fetchingCovidGlobalData","fetchingCovidGlobalDataSuccess","fetchingCovidGlobalDataError","configureStore","middleware","getDefaultMiddleware","serializableCheck","ApexChart","options","series","type","height","width","title","isHorizontal","console","log","chart","xaxis","categories","plotOptions","bar","horizontal","fill","dateLabels","enabled","position","style","fontSize","fontWeight","text","align","margin","offsetY","mapDispatchToProps","connect","useState","defaultConfig","apexConfigGlobal","setApexConfigGlobal","setCountry","countries","setCountries","useEffect","isEmpty","Object","keys","sort","xaxisData","nationwide","yaxisData","values","slice","Select","value","onChange","e","target","map","key","isMobile","Math","max","document","documentElement","clientWidth","window","innerWidth","apexConfig","setApexConfig","responseVenezuela","xaxisDataVenezuela","cities","o","yaxisCases","cases","yaxisDeaths","deaths","Home","toggle","setToggle","button","marginBottom","marginTop","onClick","App","className","Boolean","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f920125b.chunk.js","sourcesContent":["import { \r\n  createSlice,\r\n  getDefaultMiddleware,\r\n  configureStore,\r\n  createAsyncThunk \r\n} from '@reduxjs/toolkit'\r\nimport { combineReducers } from 'redux'\r\nimport axios from 'axios'\r\n\r\n// API\r\nexport const fetchCovidVenezuelaData = createAsyncThunk(\r\n  'covidDataVenezuela/fetchingCovidDataVenezuela',\r\n  async country => {\r\n    const response = await axios.get(`https://coronavirus-cities-api.now.sh/country/${country}`)\r\n    return response.data\r\n  }\r\n)\r\n\r\nexport const fetchCovidGlobalData = createAsyncThunk(\r\n  'covidDataGlobal/fetchingCovidGlobalData',\r\n  async () => {\r\n    const response = await axios.get('https://api.covidnow.com/v1/global/countries')\r\n    return response.data.data\r\n  }\r\n)\r\n\r\n// Initial State\r\nconst initialState = {\r\n    data: [],\r\n    loading: false,\r\n    error: \"\"\r\n};\r\n\r\n// Slice\r\nconst sliceCovidVenezuela = createSlice({\r\n  name: 'covidDataVenezuela',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [fetchCovidVenezuelaData.pending]: (state) => {\r\n      state.loading = true\r\n    },\r\n    [fetchCovidVenezuelaData.fulfilled]: (state, action) => {\r\n      state.data = action.payload\r\n      state.loading = false\r\n      state.error = false\r\n    },\r\n    [fetchCovidVenezuelaData.rejected]: (state, action) => {\r\n      state.loading = false\r\n      state.error = action.error\r\n    }\r\n  }\r\n})\r\nconst sliceCovidGlobal = createSlice({\r\n  name: 'covidDataGlobal',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [fetchCovidGlobalData.pending]: (state) => {\r\n      state.loading = true\r\n    },\r\n    [fetchCovidGlobalData.fulfilled]: (state, action) => {\r\n      state.data = action.payload\r\n      state.loading = false\r\n      state.error = false\r\n    },\r\n    [fetchCovidGlobalData.rejected]: (state, action) => {\r\n      state.loading = false\r\n      state.error = action.error\r\n    }\r\n  }\r\n})\r\n\r\nconst reducer = combineReducers({\r\n  covidVenezuela: sliceCovidVenezuela.reducer,\r\n  covidGlobal: sliceCovidGlobal.reducer,\r\n})\r\n\r\n// Destructuring the actions we're gonna use in the app\r\nexport const {\r\n  fetchingCovidDataVenezuela,\r\n  fetchingCovidDataVenezuelaSuccess,\r\n  fetchingCovidDataVenezuelaError\r\n} = sliceCovidVenezuela.actions\r\nexport const {\r\n  fetchingCovidGlobalData,\r\n  fetchingCovidGlobalDataSuccess,\r\n  fetchingCovidGlobalDataError\r\n} = sliceCovidGlobal.actions\r\n\r\n// Configuring our store which will be used in Provider to enable Global State\r\nexport const store = configureStore({\r\n  reducer: reducer,\r\n  middleware: [...getDefaultMiddleware({\r\n    serializableCheck: false,\r\n  })]\r\n})\r\n","import React from 'react'\r\nimport Chart from 'react-apexcharts'\r\n\r\nconst ApexChart = ({ options, series, type, height }) => {\r\n  return (\r\n    <Chart \r\n      options = {options}\r\n      series = {series}\r\n      type={type}\r\n      height= {height}\r\n      width= \"100%\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default ApexChart\r\n","export default function(title, isHorizontal) {\r\n  console.log('ishir', isHorizontal)\r\n  return {\r\n    options: {\r\n      chart: {\r\n        //background: '#f4f4f4',\r\n        // foreColor: '#333'\r\n      },\r\n      xaxis: {\r\n        categories: []\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: isHorizontal, // if true it would be horizontal\r\n        }\r\n      },\r\n      fill: {\r\n        // colors: ['#f44336']\r\n      },\r\n      dateLabels: {\r\n        enabled: true,\r\n        position: 'top',\r\n        style: {\r\n          fontSize: '40px',\r\n          fontWeight: 'bold',\r\n        }\r\n      },\r\n      title: {\r\n        text: title,\r\n        align: 'center',\r\n        margin: 20,\r\n        offsetY: 20,\r\n        style: {\r\n          fontSize: '25px'\r\n        }\r\n      }\r\n    },\r\n    series: [{\r\n      name: 'Cases',\r\n      data: []\r\n    }]\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport isEmpty from 'lodash/isEmpty'\r\n// Actions\r\nimport { fetchCovidGlobalData } from '../../slices'\r\n// Components\r\nimport ApexChart from '../ApexChart'\r\n// utils\r\nimport defaultConfig from '../../utils/apexDefaultConfig'\r\n\r\nconst mapDispatchToProps = ({ fetchCovidGlobalData })\r\nconst mapStateToProps = state => ({\r\n  covidGlobal: {\r\n    data: state.covidGlobal.data,\r\n    loading: state.covidGlobal.loading\r\n  }\r\n})\r\n\r\nconst CovidGlobalChart = ({ fetchCovidGlobalData, loading, covidGlobal, height }) => {\r\n  const [apexConfigGlobal, setApexConfigGlobal] = useState(defaultConfig('COVID-19 GLOBAL'))\r\n  const [country, setCountry] = useState('Venezuela')\r\n  const [countries, setCountries] = useState([])\r\n\r\n  const onChangeSelect = e => setCountry(e.target.value)\r\n  \r\n  useEffect(() => {\r\n    if (isEmpty(covidGlobal.data)) fetchCovidGlobalData('Venezuela')\r\n    const response = covidGlobal.data || []\r\n    const countries = !isEmpty(response) && Object.keys(response).sort()\r\n    setCountries(countries)\r\n    const xaxisData = !isEmpty(response) && Object.keys(response[country].nationwide)\r\n    const yaxisData = !isEmpty(response) && Object.values(response[country].nationwide)\r\n    if (!isEmpty(response)) {\r\n      setApexConfigGlobal({\r\n        options: { ...apexConfigGlobal.options, xaxis: { categories: xaxisData.slice(1) } },\r\n        series: [\r\n          { name: 'Cases', data: yaxisData.slice(1) }\r\n        ] \r\n      })\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [country, covidGlobal.data])\r\n\r\n  const Select = !isEmpty(countries) && (\r\n    <select value={country} onChange={onChangeSelect}>\r\n      {countries.map(country => (\r\n        <option key={country} value={country}>{country}</option>\r\n      ))}\r\n    </select>\r\n  )\r\n\r\n  if (loading) return <div>LOADING</div>\r\n\r\n  return (\r\n    <div>\r\n      {Select}\r\n      <ApexChart height={height} type='bar' options={apexConfigGlobal.options} series={apexConfigGlobal.series} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CovidGlobalChart)\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport isEmpty from 'lodash/isEmpty'\r\n// Actions\r\nimport { fetchCovidVenezuelaData } from '../../slices'\r\n// Components\r\nimport ApexChart from '../ApexChart'\r\n// utils\r\nimport defaultConfig from '../../utils/apexDefaultConfig'\r\n\r\nconst mapDispatchToProps = ({ fetchCovidVenezuelaData })\r\nconst mapStateToProps = state => ({\r\n  covidVenezuela: {\r\n    data: state.covidVenezuela.data,\r\n    loading: state.covidVenezuela.loading\r\n  }\r\n})\r\n\r\nconst vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\nconst isMobile = vw < 450\r\n\r\nconst CovidVenezuelaChart = ({ fetchCovidVenezuelaData, loading, covidVenezuela, height }) => {\r\n  const [apexConfig, setApexConfig] = useState(defaultConfig('COVID-19 VENEZUELA', isMobile))\r\n  \r\n  useEffect(() => {\r\n    // SETS DATA FOR VENEZUELA\r\n    if (isEmpty(covidVenezuela.data)) fetchCovidVenezuelaData('venezuela')\r\n    const responseVenezuela = covidVenezuela.data || []\r\n    const xaxisDataVenezuela = !isEmpty(responseVenezuela) && responseVenezuela.cities.map(o => o.state)\r\n    const yaxisCases = !isEmpty(responseVenezuela) && responseVenezuela.cities.map(o => o.cases)\r\n    const yaxisDeaths = !isEmpty(responseVenezuela) && responseVenezuela.cities.map(o => o.deaths)\r\n    if (!isEmpty(responseVenezuela)) {\r\n      setApexConfig({\r\n        options: { ...apexConfig.options, xaxis: { categories: xaxisDataVenezuela } },\r\n        series: [\r\n          { name: 'Cases', data: yaxisCases },\r\n          { name: 'Deaths', data: yaxisDeaths }\r\n        ] \r\n      })\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [covidVenezuela, fetchCovidVenezuelaData])\r\n\r\n  if (loading) return <div>LOADING</div>\r\n\r\n  return (\r\n    <ApexChart\r\n      type='bar'\r\n      options={apexConfig.options}\r\n      series={apexConfig.series}\r\n      height={height}\r\n    />\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CovidVenezuelaChart)\r\n","import React, { useState } from 'react'\r\n// Components\r\nimport CovidGlobalChart from '../components/charts/covidGlobalChart'\r\nimport CovidVenezuelaChart from '../components/charts/covidVenezuelaChart'\r\n\r\nconst Home = () => {\r\n  const [toggle, setToggle] = useState(true)\r\n  const onClick = () => setToggle(!toggle)\r\n  const button = (\r\n    <div style={{ marginBottom: '20px', marginTop: '20px' }}>    \r\n      <button onClick={onClick}>{toggle ? 'Switch to all countries' : \"Switch to Venezuela's states\"}</button>\r\n    </div>\r\n  )\r\n  return (\r\n    <div>\r\n      {button}\r\n      {toggle\r\n        ? <CovidVenezuelaChart height='750px' />\r\n        : <CovidGlobalChart height='600px' /> }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\nimport Home from './pages/home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport { render } from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { store } from './slices'\nimport App from \"./App\"\nimport * as serviceWorker from './serviceWorker'\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}