{"version":3,"sources":["slices/index.js","components/ApexChart.js","utils/apexDefaultConfig.js","components/charts/covidGlobalChart.js","components/charts/covidVenezuelaChart.js","components/maps/index.js","components/dashboard/index.js","components/select/index.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["fetchCovidVenezuelaData","createAsyncThunk","country","a","axios","get","response","data","fetchCovidGlobalData","initialState","loading","error","sliceCovidVenezuela","createSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","sliceCovidGlobal","reducer","combineReducers","covidVenezuela","covidGlobal","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ApexChart","options","series","type","height","width","title","isHorizontal","chart","xaxis","categories","plotOptions","bar","horizontal","fill","dateLabels","enabled","position","style","fontSize","fontWeight","text","align","margin","offsetY","CovidGlobalChart","countryHandler","useState","defaultConfig","apexConfigGlobal","setApexConfigGlobal","setCountry","countries","setCountries","useEffect","isEmpty","Object","keys","sort","xaxisData","nationwide","yaxisData","values","slice","Select","className","value","onChange","e","target","map","key","display","alignItems","flexDirection","isMobile","Math","max","document","documentElement","clientWidth","window","innerWidth","CovidVenezuelaChart","apexConfig","setApexConfig","xaxisDataVenezuela","cities","o","yaxisCases","cases","yaxisDeaths","deaths","coordinates","lat","lng","CovidMap","arr","forEach","service","push","markers","Marker","Tooltip","opacity","Map","center","zoom","TileLayer","attribution","url","Dashboard","children","confirmedCases","confirmed","totalDeaths","recoveredCases","recovered","menu","rel","href","required","c","mapDispatchToProps","selectOptions","connect","view","setView","venezuelaData","setVenezuelaData","globalData","setGlobalData","selectedCountry","setSelectedCountry","dashboardData","responseVenezuela","responseGlobal","dashboard","covidVenezuelaChart","covidGlobalChart","covidMap","App","Boolean","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kUAUaA,EAA0BC,YACrC,gDADqD,uCAErD,WAAMC,GAAN,eAAAC,EAAA,sEACyBC,IAAMC,IAAN,wDAA2DH,IADpF,cACQI,EADR,yBAESA,EAASC,MAFlB,2CAFqD,uDAQ1CC,EAAuBP,YAClC,0CADkD,sBAElD,4BAAAE,EAAA,sEACyBC,IAAMC,IAAI,gDADnC,cACQC,EADR,yBAESA,EAASC,KAAKA,MAFvB,4CAOIE,EAAe,CACjBF,KAAM,GACNG,SAAS,EACTC,MAAO,IAILC,EAAsBC,YAAY,CACtCC,KAAM,qBACNL,eACAM,SAAU,GACVC,eAAa,mBACVhB,EAAwBiB,SAAU,SAACC,GAClCA,EAAMR,SAAU,KAFP,cAIVV,EAAwBmB,WAAY,SAACD,EAAOE,GAC3CF,EAAMX,KAAOa,EAAOC,QACpBH,EAAMR,SAAU,EAChBQ,EAAMP,OAAQ,KAPL,cASVX,EAAwBsB,UAAW,SAACJ,EAAOE,GAC1CF,EAAMR,SAAU,EAChBQ,EAAMP,MAAQS,EAAOT,SAXZ,KAeTY,EAAmBV,YAAY,CACnCC,KAAM,kBACNL,eACAM,SAAU,GACVC,eAAa,mBACVR,EAAqBS,SAAU,SAACC,GAC/BA,EAAMR,SAAU,KAFP,cAIVF,EAAqBW,WAAY,SAACD,EAAOE,GACxCF,EAAMX,KAAOa,EAAOC,QACpBH,EAAMR,SAAU,EAChBQ,EAAMP,OAAQ,KAPL,cASVH,EAAqBc,UAAW,SAACJ,EAAOE,GACvCF,EAAMR,SAAU,EAChBQ,EAAMP,MAAQS,EAAOT,SAXZ,KAgBTa,EAAUC,YAAgB,CAC9BC,eAAgBd,EAAoBY,QACpCG,YAAaJ,EAAiBC,UAInBI,EAAQC,YAAe,CAClCL,QAASA,EACTM,WAAW,YAAKC,YAAqB,CACnCC,mBAAmB,O,iDCnERC,EAZG,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC1C,OACE,kBAAC,IAAD,CACEH,QAASA,EACTC,OAAQA,EACRC,KAAMA,EACNC,OAAQA,EACRC,MAAO,aCVE,WAASC,EAAOC,GAC7B,MAAO,CACLN,QAAS,CACPO,MAAO,GAIPC,MAAO,CACLC,WAAY,IAEdC,YAAa,CACXC,IAAK,CACHC,WAAYN,IAGhBO,KAAM,GAGNC,WAAY,CACVC,SAAS,EACTC,SAAU,MACVC,MAAO,CACLC,SAAU,OACVC,WAAY,SAGhBd,MAAO,CACLe,KAAMf,EACNgB,MAAO,SACPC,OAAQ,GACRC,QAAS,GACTN,MAAO,CACLC,SAAU,UAIhBjB,OAAQ,CAAC,CACPrB,KAAM,QACNP,KAAM,OCYGmD,G,OA1CU,SAAC,GAAsC,IAApCrB,EAAmC,EAAnCA,OAAQ9B,EAA2B,EAA3BA,KAAMoD,EAAqB,EAArBA,eAAqB,EACbC,mBAASC,EAAc,oBADV,mBACtDC,EADsD,KACpCC,EADoC,OAE/BH,mBAAS,aAFsB,mBAEtD1D,EAFsD,KAE7C8D,EAF6C,OAG3BJ,mBAAS,IAHkB,mBAGtDK,EAHsD,KAG3CC,EAH2C,KAO7DC,qBAAU,WACR,IAAMF,GAAaG,IAAQ7D,IAAS8D,OAAOC,KAAK/D,GAAMgE,OACtDL,EAAaD,GAEb,IAAMO,GAAaJ,IAAQ7D,IAAS8D,OAAOC,KAAK/D,EAAKL,GAASuE,YACxDC,GAAaN,IAAQ7D,IAAS8D,OAAOM,OAAOpE,EAAKL,GAASuE,YAC3DL,IAAQ7D,IACXwD,EAAoB,CAClB7B,QAAQ,eAAM4B,EAAiB5B,QAAxB,CAAiCQ,MAAO,CAAEC,WAAY6B,EAAUI,MAAM,MAC7EzC,OAAQ,CACN,CAAErB,KAAM,QAASP,KAAMmE,EAAUE,MAAM,SAK5C,CAAC1E,EAASK,IAEb4D,qBAAU,kBAAMR,EAAezD,KAAU,CAACA,EAASyD,IAEnD,IAAMkB,GAAUT,IAAQH,IACtB,4BAAQa,UAAU,SAASC,MAAO7E,EAAS8E,SAtBtB,SAAAC,GAAC,OAAIjB,EAAWiB,EAAEC,OAAOH,SAuB3Cd,EAAUkB,KAAI,SAAAjF,GAAO,OACpB,4BAAQkF,IAAKlF,EAAS6E,MAAO7E,GAAUA,OAK7C,OACE,yBAAKiD,MAAO,CAAEkC,QAAQ,OAAQC,WAAY,SAAUC,cAAe,WAChEV,EACD,kBAAC,EAAD,CAAWxC,OAAQA,EAAQD,KAAK,MAAMF,QAAS4B,EAAiB5B,QAASC,OAAQ2B,EAAiB3B,aCrClGqD,EADKC,KAAKC,IAAIC,SAASC,gBAAgBC,YAAaC,OAAOC,YAAc,GACzD,IA+BPC,EA7Ba,SAAC,GAAsB,IAApBzF,EAAmB,EAAnBA,KAAM8B,EAAa,EAAbA,OAAa,EACZuB,mBAASC,EAAc,qBAAsB2B,IADjC,mBACzCS,EADyC,KAC7BC,EAD6B,KAmBhD,OAhBA/B,qBAAU,WACR,IAAMgC,GAAsB/B,IAAQ7D,IAASA,EAAK6F,OAAOjB,KAAI,SAAAkB,GAAC,OAAIA,EAAEnF,SAC9DoF,GAAclC,IAAQ7D,IAASA,EAAK6F,OAAOjB,KAAI,SAAAkB,GAAC,OAAIA,EAAEE,SACtDC,GAAepC,IAAQ7D,IAASA,EAAK6F,OAAOjB,KAAI,SAAAkB,GAAC,OAAIA,EAAEI,UACxDrC,IAAQ7D,IACX2F,EAAc,CACZhE,QAAQ,eAAM+D,EAAW/D,QAAlB,CAA2BQ,MAAO,CAAEC,WAAYwD,KACvDhE,OAAQ,CACN,CAAErB,KAAM,QAASP,KAAM+F,GACvB,CAAExF,KAAM,SAAUP,KAAMiG,QAK7B,CAACjG,IAGF,kBAAC,EAAD,CACE6B,KAAK,MACLF,QAAS+D,EAAW/D,QACpBC,OAAQ8D,EAAW9D,OACnBE,OAAQA,K,oCC/BRqE,EAAc,CAClB,CAAExF,MAAO,UAAWyF,IAAK,OAAQC,KAAM,QACvC,CAAE1F,MAAO,UAAWyF,IAAK,MAAQC,KAAM,QACvC,CAAE1F,MAAO,SAAUyF,IAAK,OAAQC,KAAM,QACtC,CAAE1F,MAAO,YAAayF,IAAK,OAAQC,KAAM,QACzC,CAAE1F,MAAO,aAAcyF,IAAK,OAAQC,KAAM,QAC1C,CAAE1F,MAAO,UAAWyF,IAAK,MAAOC,KAAM,QACtC,CAAE1F,MAAO,QAASyF,IAAK,OAAQC,KAAM,QACrC,CAAE1F,MAAO,YAAUyF,IAAK,OAAQC,KAAM,QACtC,CAAE1F,MAAO,gBAAcyF,IAAK,OAAQC,KAAM,QAC1C,CAAE1F,MAAO,QAASyF,IAAK,MAAOC,KAAM,QACpC,CAAE1F,MAAO,YAAUyF,IAAK,MAAOC,KAAM,QACrC,CAAE1F,MAAO,UAAWyF,IAAK,MAAOC,KAAM,QACtC,CAAE1F,MAAO,UAAWyF,IAAK,MAAOC,KAAM,QACtC,CAAE1F,MAAO,gBAAiByF,IAAK,OAAQC,KAAM,QAC7C,CAAE1F,MAAO,aAAWyF,IAAK,MAAOC,KAAM,QACtC,CAAE1F,MAAO,UAAWyF,IAAK,MAAOC,KAAM,OACtC,CAAE1F,MAAO,UAAWyF,IAAK,OAAQC,KAAM,QACvC,CAAE1F,MAAO,QAASyF,IAAK,OAAQC,KAAM,SAsCxBC,EAlCE,SAAC,GAAc,IAAZtG,EAAW,EAAXA,KAGduG,EAAM,GACVvG,EAAK6F,OAAOW,SAAQ,SAAAC,GAClBN,EAAYK,SAAQ,SAAAV,GACfW,EAAQ9F,QAAUmF,EAAEnF,OACrB4F,EAAIG,KAAJ,eAAcD,EAAd,GAA0BX,UAKhC,IAAMa,EAAUJ,EAAI3B,KAAI,SAAAjE,GAAK,OAC3B,kBAACiG,EAAA,EAAD,CAAQ/B,IAAKlE,EAAMA,MAAOgC,SAAU,CAAChC,EAAMyF,IAAKzF,EAAM0F,MACpD,kBAACQ,EAAA,EAAD,CAASC,QAAS,GAChB,4BAAKnG,EAAMA,OACX,uCAAaA,EAAMqF,OACnB,wCAAcrF,EAAMuF,QAAU,QAKpC,OACE,kBAACa,EAAA,EAAD,CAAKC,OAtBU,CAAC,KAAM,IAsBCC,KArBZ,EAqBwBrE,MAAO,CAAEb,MAAO,OAAQD,OAAQ,UACjE,kBAACoF,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,6CAELT,KCRQU,G,OA1CG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUtH,EAAW,EAAXA,KACvBuH,EAAiBvH,GAAQA,EAAKkE,YAAclE,EAAKkE,WAAWsD,UAC5DC,EAAczH,GAAQA,EAAKkE,YAAclE,EAAKkE,WAAWgC,OACzDwB,EAAiB1H,GAAQA,EAAKkE,YAAclE,EAAKkE,WAAWyD,UAC5DC,EACJ,2BAAOrD,UAAU,QACf,6BACE,8BAAM,gDAA0BgD,GAChC,8BAAM,gDAA0BE,GAChC,8BAAM,gDAA0BC,IAElC,yBAAKnD,UAAU,UACb,wCACW,IACT,uBACEI,OAAO,SACPkD,IAAI,sBACJC,KAAK,gDAHP,iBAKF,yCACY,IACV,uBACEnD,OAAO,SACPkD,IAAI,sBACJC,KAAK,gCAHP,WAIC,IANH,QAMa,IACX,uBACEnD,OAAO,SACPkD,IAAI,sBACJC,KAAK,8BAHP,aAQR,OACE,yBAAKvD,UAAU,cACZ+C,EACAM,KC9BQtD,EARA,SAAC,GAAuC,IAArC/D,EAAoC,EAApCA,KAAMiE,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUL,EAAa,EAAbA,OACvC,OACE,4BAAQ7D,KAAMA,EAAMiE,MAAOA,EAAOC,SAAUA,EAAUsD,UAAQ,GAC3D3D,EAAOQ,KAAI,SAAAoD,GAAC,OAAI,4BAAQnD,IAAKmD,EAAGxD,MAAOwD,GAAIA,SCS5CC,G,OAAsB,CAAExI,0BAAyBQ,yBAYjDiI,EAAgB,CAAC,qBAAsB,+BAAgC,iBAoD9DC,eA/DS,SAAAxH,GAAK,MAAK,CAChCQ,eAAgB,CACdnB,KAAMW,EAAMQ,eAAenB,KAC3BG,QAASQ,EAAMQ,eAAehB,SAEhCiB,YAAa,CACXpB,KAAMW,EAAMS,YAAYpB,KACxBG,QAASQ,EAAMS,YAAYjB,YA0D7B8H,EAFaE,EAlDF,SAAC,GAAoF,IAAlF1I,EAAiF,EAAjFA,wBAAyBQ,EAAwD,EAAxDA,qBAAsBkB,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YAAkB,EACvEiC,mBAAS6E,EAAc,IADgD,mBACxFE,EADwF,KAClFC,EADkF,OAErDhF,mBAAS,IAF4C,mBAExFiF,EAFwF,KAEzEC,EAFyE,OAG3DlF,mBAAS,IAHkD,mBAGxFmF,EAHwF,KAG5EC,EAH4E,OAIjDpF,mBAAS,aAJwC,mBAIxFqF,EAJwF,KAIvEC,EAJuE,KAMzFC,EAAgBR,IAASF,EAAc,GACzCM,EAAWE,GACXF,EAAU,UAKd5E,qBAAU,WAEJC,IAAQ1C,EAAenB,OAAOP,EAAwB,aACtDoE,IAAQzC,EAAYpB,OAAOC,EAAqB,aACpD,IAAM4I,EAAoB1H,EAAenB,MAAQ,GAC3C8I,EAAiB1H,EAAYpB,MAAQ,GAC3CuI,EAAiBM,GACjBJ,EAAcK,KAEb,CAAC3H,EAAgB1B,IAEpB,IAAMsJ,EACJ,kBAAC,EAAD,CAAW/I,KAAM4I,GACf,kBAAC,EAAD,CACErI,KAAK,cACLiE,MAAO4D,EACPhE,OAAQ8D,EACRzD,SApBW,SAAAC,GAAC,OAAI2D,EAAQ3D,EAAEC,OAAOH,WAwBjCwE,EAAsB,kBAAC,EAAD,CAAqBhJ,KAAMsI,EAAexG,OAAO,UACvEmH,EAAmB,kBAAC,EAAD,CAAkB7F,eAxBpB,SAAAoB,GAAK,OAAImE,EAAmBnE,IAwBwBxE,KAAMwI,EAAY1G,OAAO,UAC9FoH,EAAY,kBAAC,EAAD,CAAUlJ,KAAMsI,IAElC,OAAInH,EAAehB,SAAWiB,EAAYjB,QAAgB,wCAGxD,yBAAKoE,UAAU,aACZwE,EACAX,IAASF,EAAc,IAAMe,EAC7Bb,IAASF,EAAc,IAAMc,EAC7BZ,IAASF,EAAc,IAAMgB,M,OC7DrBC,MARf,WACE,OACE,yBAAK5E,UAAU,OACb,kBAAC,EAAD,QCKc6E,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCXNC,iBACE,kBAAC,IAAD,CAAUnI,MAAOA,GACf,kBAAC,EAAD,OAEF+D,SAASqE,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5J,GACL6J,QAAQ7J,MAAMA,EAAM8J,a","file":"static/js/main.3944fade.chunk.js","sourcesContent":["import { \r\n  createSlice,\r\n  getDefaultMiddleware,\r\n  configureStore,\r\n  createAsyncThunk \r\n} from '@reduxjs/toolkit'\r\nimport { combineReducers } from 'redux'\r\nimport axios from 'axios'\r\n\r\n// API\r\nexport const fetchCovidVenezuelaData = createAsyncThunk(\r\n  'covidDataVenezuela/fetchingCovidDataVenezuela',\r\n  async country => {\r\n    const response = await axios.get(`https://coronavirus-cities-api.now.sh/country/${country}`)\r\n    return response.data\r\n  }\r\n)\r\n\r\nexport const fetchCovidGlobalData = createAsyncThunk(\r\n  'covidDataGlobal/fetchingCovidGlobalData',\r\n  async () => {\r\n    const response = await axios.get('https://api.covidnow.com/v1/global/countries')\r\n    return response.data.data\r\n  }\r\n)\r\n\r\n// Initial State\r\nconst initialState = {\r\n    data: [],\r\n    loading: false,\r\n    error: \"\"\r\n};\r\n\r\n// Slice\r\nconst sliceCovidVenezuela = createSlice({\r\n  name: 'covidDataVenezuela',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [fetchCovidVenezuelaData.pending]: (state) => {\r\n      state.loading = true\r\n    },\r\n    [fetchCovidVenezuelaData.fulfilled]: (state, action) => {\r\n      state.data = action.payload\r\n      state.loading = false\r\n      state.error = false\r\n    },\r\n    [fetchCovidVenezuelaData.rejected]: (state, action) => {\r\n      state.loading = false\r\n      state.error = action.error\r\n    }\r\n  }\r\n})\r\nconst sliceCovidGlobal = createSlice({\r\n  name: 'covidDataGlobal',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [fetchCovidGlobalData.pending]: (state) => {\r\n      state.loading = true\r\n    },\r\n    [fetchCovidGlobalData.fulfilled]: (state, action) => {\r\n      state.data = action.payload\r\n      state.loading = false\r\n      state.error = false\r\n    },\r\n    [fetchCovidGlobalData.rejected]: (state, action) => {\r\n      state.loading = false\r\n      state.error = action.error\r\n    }\r\n  }\r\n})\r\n\r\nconst reducer = combineReducers({\r\n  covidVenezuela: sliceCovidVenezuela.reducer,\r\n  covidGlobal: sliceCovidGlobal.reducer\r\n})\r\n\r\n// Configuring our store which will be used in Provider to enable Global State\r\nexport const store = configureStore({\r\n  reducer: reducer,\r\n  middleware: [...getDefaultMiddleware({\r\n    serializableCheck: false,\r\n  })]\r\n})\r\n","import React from 'react'\r\nimport Chart from 'react-apexcharts'\r\n\r\nconst ApexChart = ({ options, series, type, height }) => {\r\n  return (\r\n    <Chart \r\n      options={options}\r\n      series={series}\r\n      type={type}\r\n      height={height}\r\n      width= \"1000px\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default ApexChart\r\n","export default function(title, isHorizontal) {\r\n  return {\r\n    options: {\r\n      chart: {\r\n        //background: '#f4f4f4',\r\n        // foreColor: '#333'\r\n      },\r\n      xaxis: {\r\n        categories: []\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: isHorizontal, // if true it would be horizontal\r\n        }\r\n      },\r\n      fill: {\r\n        // colors: ['#f44336']\r\n      },\r\n      dateLabels: {\r\n        enabled: true,\r\n        position: 'top',\r\n        style: {\r\n          fontSize: '40px',\r\n          fontWeight: 'bold',\r\n        }\r\n      },\r\n      title: {\r\n        text: title,\r\n        align: 'center',\r\n        margin: 20,\r\n        offsetY: 20,\r\n        style: {\r\n          fontSize: '25px'\r\n        }\r\n      }\r\n    },\r\n    series: [{\r\n      name: 'Cases',\r\n      data: []\r\n    }]\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\n// Components\r\nimport ApexChart from '../ApexChart'\r\n// utils\r\nimport defaultConfig from '../../utils/apexDefaultConfig'\r\nimport './styles.css'\r\n\r\nconst CovidGlobalChart = ({ height, data, countryHandler }) => {\r\n  const [apexConfigGlobal, setApexConfigGlobal] = useState(defaultConfig('COVID-19 GLOBAL'))\r\n  const [country, setCountry] = useState('Venezuela')\r\n  const [countries, setCountries] = useState([])\r\n\r\n  const onChangeSelect = e => setCountry(e.target.value)\r\n  \r\n  useEffect(() => {\r\n    const countries = !isEmpty(data) && Object.keys(data).sort()\r\n    setCountries(countries)\r\n    // Shaping our x and y axis data\r\n    const xaxisData = !isEmpty(data) && Object.keys(data[country].nationwide)\r\n    const yaxisData = !isEmpty(data) && Object.values(data[country].nationwide)\r\n    if (!isEmpty(data)) {\r\n      setApexConfigGlobal({\r\n        options: { ...apexConfigGlobal.options, xaxis: { categories: xaxisData.slice(1) } },\r\n        series: [\r\n          { name: 'Cases', data: yaxisData.slice(1) }\r\n        ] \r\n      })\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [country, data])\r\n\r\n  useEffect(() => countryHandler(country), [country, countryHandler])\r\n\r\n  const Select = !isEmpty(countries) && (\r\n    <select className='select' value={country} onChange={onChangeSelect}>\r\n      {countries.map(country => (\r\n        <option key={country} value={country}>{country}</option>\r\n      ))}\r\n    </select>\r\n  )\r\n\r\n  return (\r\n    <div style={{ display:'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n      {Select}\r\n      <ApexChart height={height} type='bar' options={apexConfigGlobal.options} series={apexConfigGlobal.series} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CovidGlobalChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\n// Components\r\nimport ApexChart from '../ApexChart'\r\n// utils\r\nimport defaultConfig from '../../utils/apexDefaultConfig'\r\n\r\nconst vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\nconst isMobile = vw < 450\r\n\r\nconst CovidVenezuelaChart = ({ data, height }) => {\r\n  const [apexConfig, setApexConfig] = useState(defaultConfig('COVID-19 VENEZUELA', isMobile))\r\n  \r\n  useEffect(() => {\r\n    const xaxisDataVenezuela = !isEmpty(data) && data.cities.map(o => o.state)\r\n    const yaxisCases = !isEmpty(data) && data.cities.map(o => o.cases)\r\n    const yaxisDeaths = !isEmpty(data) && data.cities.map(o => o.deaths)\r\n    if (!isEmpty(data)) {\r\n      setApexConfig({\r\n        options: { ...apexConfig.options, xaxis: { categories: xaxisDataVenezuela } },\r\n        series: [\r\n          { name: 'Cases', data: yaxisCases },\r\n          { name: 'Deaths', data: yaxisDeaths }\r\n        ] \r\n      })\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data])\r\n\r\n  return (\r\n    <ApexChart\r\n      type='bar'\r\n      options={apexConfig.options}\r\n      series={apexConfig.series}\r\n      height={height}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CovidVenezuelaChart\r\n","import React from 'react'\r\nimport { Map, TileLayer, Marker, Tooltip } from 'react-leaflet'\r\n\r\nconst coordinates = [\r\n  { state: 'Caracas', lat: 10.491, lng: -66.902 },\r\n  { state: 'Miranda', lat: 10.250, lng: -66.416 },\r\n  { state: 'Aragua', lat: 10.235, lng: -67.591 },\r\n  { state: 'La Guaira', lat: 10.599, lng: -66.934 },\r\n  { state: 'Los Roques', lat: 11.857, lng: -66.757 },\r\n  { state: 'Barinas', lat: 8.622, lng: -70.207 },\r\n  { state: 'Zulia', lat: 10.666, lng: -71.612 },\r\n  { state: 'Falcón', lat: 11.404, lng: -69.673 },\r\n  { state: 'Anzoátegui', lat: 10.136, lng: -64.686 },\r\n  { state: 'Apure', lat: 7.887, lng: -67.472 },\r\n  { state: 'Mérida', lat: 8.589, lng: -71.156 },\r\n  { state: 'Cojedes', lat: 9.661, lng: -68.582 },\r\n  { state: 'Monagas', lat: 9.745, lng: -63.183 },\r\n  { state: 'Nueva Esparta', lat: 10.957, lng: -63.869 },\r\n  { state: 'Guárico', lat: 9.911, lng: -67.353 },\r\n  { state: 'Bolivar', lat: 8.129, lng: -63.540 },\r\n  { state: 'Yaracuy', lat: 10.079, lng: -69.126 },\r\n  { state: 'Sucre', lat: 10.453, lng: -64.182 }\r\n  // { state: 'Estado no definido', lat: 10.064, lng: -69.357 },\r\n]\r\n\r\nconst CovidMap = ({ data }) => {\r\n  const position = [8.5, -66]\r\n  const zoom = 7\r\n  let arr = []\r\n  data.cities.forEach(service => {\r\n    coordinates.forEach(o => {\r\n      if(service.state === o.state) {\r\n        arr.push({ ...service, ...o })\r\n      }\r\n    })\r\n  })\r\n\r\n  const markers = arr.map(state => (\r\n    <Marker key={state.state} position={[state.lat, state.lng]}>\r\n      <Tooltip opacity={1}>\r\n        <h1>{state.state}</h1>\r\n        <div>Cases: {state.cases}</div>\r\n        <div>Deaths: {state.deaths || 0}</div>\r\n      </Tooltip>\r\n    </Marker>\r\n  ))\r\n\r\n  return (\r\n    <Map center={position} zoom={zoom} style={{ width: '100%', height: '100vh'}}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n      />\r\n      {markers}\r\n    </Map>\r\n  );\r\n}\r\n\r\n\r\nexport default CovidMap\r\n","import React from 'react'\r\nimport './styles.css'\r\n\r\nconst Dashboard = ({ children, data }) => {\r\n  const confirmedCases = data && data.nationwide && data.nationwide.confirmed\r\n  const totalDeaths = data && data.nationwide && data.nationwide.deaths\r\n  const recoveredCases = data && data.nationwide && data.nationwide.recovered\r\n  const menu = (\r\n    <aside className=\"menu\">\r\n      <div>\r\n        <span><h1>Confirmed Cases:</h1>{confirmedCases}</span>\r\n        <span><h1>Total of deaths:</h1>{totalDeaths}</span>\r\n        <span><h1>Recovered Cases:</h1>{recoveredCases}</span>\r\n      </div>\r\n      <div className='author'>\r\n        <div>\r\n          Made by {' '}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href='https://www.linkedin.com/in/adrianberia2013/'>Adrian Beria</a>\r\n        </div>\r\n        <div>\r\n          Check my {' '}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href='https://twitter.com/Adrberia'>Twitter</a>\r\n          {' '} and {' '}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href='https://github.com/Radinax'>Github</a>\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  )\r\n  return(\r\n    <div className='dashboard '>\r\n      {children}\r\n      {menu}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from 'react'\r\n\r\nconst Select = ({ name, value, onChange, values }) => {\r\n  return(\r\n    <select name={name} value={value} onChange={onChange} required>\r\n      {values.map(c => <option key={c} value={c}>{c}</option>)}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport isEmpty from 'lodash/isEmpty'\r\n// Actions\r\nimport { fetchCovidGlobalData, fetchCovidVenezuelaData } from '../slices'\r\n// Components\r\nimport CovidGlobalChart from '../components/charts/covidGlobalChart'\r\nimport CovidVenezuelaChart from '../components/charts/covidVenezuelaChart'\r\nimport CovidMap from '../components/maps'\r\nimport Dashboard from '../components/dashboard'\r\nimport Select from '../components/select'\r\n// Styles\r\nimport './styles.css'\r\n\r\nconst mapDispatchToProps = ({ fetchCovidVenezuelaData, fetchCovidGlobalData })\r\nconst mapStateToProps = state => ({\r\n  covidVenezuela: {\r\n    data: state.covidVenezuela.data,\r\n    loading: state.covidVenezuela.loading\r\n  },\r\n  covidGlobal: {\r\n    data: state.covidGlobal.data,\r\n    loading: state.covidGlobal.loading\r\n  }\r\n})\r\n\r\nconst selectOptions = ['Chart by Countries', 'Chart by states in Venezuela', 'Venezuela Map']\r\n\r\nconst Home = ({ fetchCovidVenezuelaData, fetchCovidGlobalData, covidVenezuela, covidGlobal }) => {\r\n  const [view, setView] = useState(selectOptions[0])\r\n  const [venezuelaData, setVenezuelaData] = useState([])\r\n  const [globalData, setGlobalData] = useState([])\r\n  const [selectedCountry, setSelectedCountry] = useState('Venezuela')\r\n\r\n  const dashboardData = view === selectOptions[0]\r\n    ? globalData[selectedCountry]\r\n    : globalData['Venezuela']\r\n\r\n  const onChange = e => setView(e.target.value)\r\n  const countryHandler = value => setSelectedCountry(value)\r\n\r\n  useEffect(() => {\r\n    // SETS DATA FOR GLOBAL AND VENEZUELA\r\n    if (isEmpty(covidVenezuela.data)) fetchCovidVenezuelaData('venezuela')\r\n    if (isEmpty(covidGlobal.data)) fetchCovidGlobalData('Venezuela')\r\n    const responseVenezuela = covidVenezuela.data || []\r\n    const responseGlobal = covidGlobal.data || []\r\n    setVenezuelaData(responseVenezuela)\r\n    setGlobalData(responseGlobal)\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [covidVenezuela, fetchCovidVenezuelaData])\r\n\r\n  const dashboard = (\r\n    <Dashboard data={dashboardData}>      \r\n      <Select\r\n        name='Select View'\r\n        value={view}\r\n        values={selectOptions}\r\n        onChange={onChange}\r\n      />\r\n    </Dashboard>\r\n  )\r\n  const covidVenezuelaChart = <CovidVenezuelaChart data={venezuelaData} height='750px' />\r\n  const covidGlobalChart = <CovidGlobalChart countryHandler={countryHandler} data={globalData} height='600px' />\r\n  const covidMap =  <CovidMap data={venezuelaData}  />\r\n\r\n  if (covidVenezuela.loading || covidGlobal.loading) return <div>LOADING</div>\r\n\r\n  return (\r\n    <div className='container'>\r\n      {dashboard}\r\n      {view === selectOptions[0] && covidGlobalChart}\r\n      {view === selectOptions[1] && covidVenezuelaChart}\r\n      {view === selectOptions[2] && covidMap}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Home)\r\n","import React from 'react';\r\nimport Home from './pages/home'\r\nimport './index.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport { render } from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { store } from './slices'\nimport App from \"./App\"\nimport * as serviceWorker from './serviceWorker'\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}